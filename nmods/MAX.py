#_wut Demo - Python integration
#_ver 0.1

# By default, MACROSS always passes these vars to any python scripts it loads from the menu:
# $USR, $vf19_DEFAULTPATH, $vf19_PYOPT, $vf19_numchk, $vf19_pylib, $vf19_TOOLSROOT

import sys
L = len(sys.argv)


# Use these MACROSS vars at a minimum for the demo
if L > 2:
    USR = sys.argv[1]
    if USR == 'HELP':
        print("""

    This is a very basic python script to demonstrate how
    MACROSS calls powershell and python tools inter-
    changeably.

    If you use the BASARA script from MACROSS, it will
    demonstrate using variables between the GUBABA script
    and this one. Running MAX by itself will simply
    demonstrate reading MACROSS's default values for
    use in your python automations.

    Hit ENTER to continue.""")
        input()
        exit()
else:
    USR = 'HELP'


    
# MACROSS sends 6 args by default; the 5th is always the filepath to the mcdefs library
if L >= 7:
    if 'py_classes' in sys.argv[5]:
        npath = sys.argv[5]
        sys.path.insert(0,npath)  ## modify the sys path to include the py_classes folder
        import mcdefs as mc

        ## The other 5 args can be used or ignored as you like. For this demo I'll assign
        ##  each of the arguments for you, named the same way that MACROSS names them.
        ##  In order, they are:
        USR = sys.argv[1]  ## The logged-in user
        vf19_DEFAULTPATH = sys.argv[2]  ## USR's desktop filepath
        vf19_PYOPT = sys.argv[3] ## The encoded array of filepaths/URLs generated from extras.ps1
        vf19_numchk = sys.argv[4] ## The integer MACROSS uses for common math functions in all the scripts
        vf19_M = mc.makeM(vf19_numchk) ## This function splits the numchk value into 6 digits you can use for mathing
        vf19_TOOLSROOT = sys.argv[6]  ## The path to the MACROSS folder
        
        ## The psc function will pipe system commands into your powershell session
        mc.psc('cls')

# Scripts can call each other with any arguments you like; but passing them as the framework
# dictates allows scripts to share resources/values across python and powershell. I also
# add 2 more arguments here -- the name of any scripts that call this one (CALLER), and the operand
# they want evaluated (PROTOCULTURE).
if L == 9:
    CALLER = sys.argv[7]
    PROTOCULTURE = sys.argv[8]
else:
    PROTOCULTURE = None

def next(e):
    if e == 1:
        e = 'continue!'
    else:
        e = 'exit!'
        
    print('''
    Hit ENTER to''',e)
    input()

def splashPage():
    print("""

        ███╗   ███╗ █████╗ ██╗  ██╗
        ████╗ ████║██╔══██╗╚██╗██╔╝
        ██╔████╔██║███████║ ╚███╔╝ 
        ██║╚██╔╝██║██╔══██║ ██╔██╗ 
        ██║ ╚═╝ ██║██║  ██║██╔╝ ██╗
        ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝
      ================================
    """)
    

if USR == 'HELP':
    splashPage()
    print('''
    This is a python script to help BASARA show you how to integrate your python
    automations into MACROSS.

    Hit ENTER to return.
    ''')
    input()
    exit()




splashPage()

if PROTOCULTURE:
    print(
    """

    Hello! I am a python script. You have sent me exactly""",L - 1,"""arguments.

    MACROSS will *always* send 6 args by default -- I used #5 to automatically
    import the MACROSS python library (check out the MILIA.py demo script
    for more details). If the collab function is used, additional args can be
    passed from other scripts.

    To use MACROSS effectively, your python scripts will need to import the sys
    library to be able to recognize all the values MACROSS sends over.

    I'll use the 8th arg (from sys.argv), which in MACROSS is $PROTOCULTURE, to do
    a simple nslookup on""",PROTOCULTURE,""" as a demonstration of seamlessly using
    values generated by your powershell scripts. Hit ENTER to see if we can get
    this IP to resolve a domain name!
            
    """)
    input()
    demolookup = 'nslookup ' + PROTOCULTURE
    mc.psc(demolookup)
    next(1)
    
    
else:
    print("""
    This is an example python integration. You can share variables
    from the powershell toolsets to your python scripts with ease!

    At startup, MACROSS reads the Windows registry to see if Python3
    is installed. If it is, the console will pull any .py files it
    finds (in the nmods folder) into the menu and make them available
    for use. If Python3 isn't installed, python scripts are ignored.

    By default, MACROSS always passes these vars (in this order!) to
    any python script it loads straight from the main menu:

    $USR = the logged in user
    $vf19_DEFAULTPATH = the user's desktop
    $vf19_PYOPT = the pythonized list of Base64 encoded defaults,
        which in MACROSS is called $vf19_MPOD
    $vf19_numchk = the hardcoded integer MACROSS uses for math functions
    $vf19_pylib = the filepath to the 'mcdefs.py' file, which is the
        MACROSS python library
    $vf19_TOOLSROOT = the MACROSS root folder, which contains the subfolders
        'nmods' & 'ncore' (and for this demo, 'resources')

    Run the MILIA and BASARA demo scripts from the menu to see how MACROSS
    ties everything together.""")
    next(1)
    mc.psc('cls')
    splashPage()
    mc.psc('cls')
    
    print('''

    For this demo, I'm going to introduce you to GUBABA. He's a powershell script
    that uses a text file from the 'resources' folder, 'gubaba.txt', to build an
    array of Windows Event IDs and their descriptions so that he can provide quick
    ID references. Here, he's going to look up an ID or keyword for you!

    MACROSS automatically passes the location of its root folder as the 6th
    of 6 default args. I usually maintain the same variable names to be
    consistent, but you don't have to:

        vf19_TOOLSROOT = sys.argv[6]

    And of course, what I really want is the location of GUBABA.ps1 and his
    resource file, 'gubaba.txt'.

        # I make sure to add MAX as the $CALLER
        gubS = vf19_TOOLSROOT + '\\nmods\\GUBABA.ps1 + "MAX" '

        # Right now, 'resources' is in the MACROSS directory
        gubF = vf19_TOOLSROOT + '\\resources\\gubaba.txt '
    
    
    ''')
    next(1)
    mc.psc('cls')
    print('''

    From here, you need to continue building out the necessary values that you will need
    to pass to your scripts. In GUBABA's case, when he's called without the MACROSS menu,
    he expects you to give him a $CALLER parameter (who you are), a $table param (the
    location of the text file you want him to reference), and an optional $PROTOCULTURE param
    (what you want him look up). So let's build it all out. We already have gubS (the script
    location) & gubF (the text file).''')
    Z = ''
    while Z == '':
        Z = input('''
    Now give me an ID or keyword like '5157' or 'user account' and we'll pass it to GUBABA.
    He'll spit back any Windows Event IDs that contain your search term:  ''')
    Z1 = '\'' + Z + '\''
    print('''
                  gub = gubS + gubF + ''',Z1,'''

    And finally we specify powershell as the process to run the command we just put together
    as 'gub':
      
                  gub = 'powershell.exe ' + gub

    The mcdefs library contains a function 'psc' that we use to run GUBABA:

                  mcdefs.psc(gub)
        
    ''')
    next(1)
    vf19_TOOLSROOT = sys.argv[6]
    gubS = vf19_TOOLSROOT + '\\nmods\\GUBABA.ps1 "MAX" '
    gubF = vf19_TOOLSROOT + '\\resources\\gubaba.txt '
    gub = 'powershell.exe ' + gubS + gubF + Z1
    mc.psc(gub)
    mc.psc('cls')
    splashPage()
    print('''
    And that was GUBABA!''')
    next(1)
    mc.psc('cls')



mc.psc('cls')
print(
    """
    Just tweak your existing python and powershell tools to be able
    to pass arguments back and forth between each other using MACROSS'
    built-in 'collab' function. MACROSS also works best when you do
    all the hard stuff up-front by anticipating how analysts will use
    your script, and providing the options and error checks auto-""")

if PROTOCULTURE == None:
    print("    magically. (See the BASARA script in MACROSS's menu)")
else:
    print('    magically.')
    
if PROTOCULTURE:
    print(
    """
    This python script is reading $USR and $vf19_DEFAULTPATH from
    MACROSS right now:
    """)
    print('	---',USR)
    print('	---',vf19_DEFAULTPATH)
    print(
        """
    ...so we could write your username to a file on your desktop
    if we needed to, along with the scanned IP address and any
    other variable passed in from other MACROSS tools.""")
    
if PROTOCULTURE == None:
    print('''
    Try running the scripts BASARA or MINMAY from the menu, they will
    better demonstrate jumping between your powershell & python
    toolsets to help automate investigations on your network.''')

next(1)
print(
"""
    Mashing Python into Powershell wasn't what I set out to do, but
    the flexibility of combining powershell and python automations --
    especially if you have multiple APIs you can grab data from in
    addition to Active Directory -- to investigate incidents can come
    in real handy.""")

next(0)
exit()
